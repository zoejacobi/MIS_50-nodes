import networkx as nx
import dwave_networkx as dnx 
from dwave.system.samplers import DWaveSampler
from dwave.system.composites import EmbeddingComposite
import time
import dimod
import json

sampler = EmbeddingComposite(DWaveSampler(token="DEV-0be5a30b6969ccd3064f203e018376b2278b9074"))
G = nx.Graph() 
G.add_edges_from([(1,8),(20,17),(5,1),(19,17),(5,7),(20,18),(5,8),(5,4),(15,20),(9,16),(9,17),(14,12),(7,4),(7,8),(19,20),(1,4),(6,17),(8,12),(5,19),(6,4),(2,5),(2,1),(2,8),(18,17),(2,4),(2,17),(6,5),(16,17),(8,4),(12,4),(6,8),(16,10),(19,10),(8,18),(4,17),(7,18),(3,20),(12,18),(18,4),(10,17),(20,16),(15,16),(15,18),(1,18),(1,12),(1,16),(5,14),(2,6),(6,18),(6,12),(6,16),(6,14),(6,7),(6,1),(2,18),(2,12),(2,16),(5,16),(5,10),(5,18),(1,7),(13,17),(13,16),(13,20),(13,15),(13,11),(5,17),(2,7),(14,15),(7,12),(5,9),(5,15),(1,14),(1,3),(2,22),(6,22),(5,22),(13,21),(1,22),(25,15),(25,20),(25,12),(7,22),(20,21),(8,22),(12,22),(23,18),(22,4),(2,25),(2,24),(6,25),(6,24),(5,25),(5,23),(13,25),(1,25),(2,24),(25,7),(25,21),(25,24),(25,8),(25,16),(25,18),(25,22),(25,4),(25,17),(21,15),(21,24),(21,16),(21,12),(21,18),(24,10),(24,17),(18,22),(22,17),(13,28),(13,30),(19,29),(25,28),(21,28),(15,28),(20,28),(28,30),(25,27),(21,30),(24,29),(26,29),(17,25),(20,27),(20,30),(16,30),(23,26),(17,26),(19,28),(24,28),(27,28),(16,28),(12,28),(10,28),(25,30),(14,29),(14,27),(15,30),(24,23),(23,29),(16,27),(18,27),(12,30),(10,30),(18,30),(5,29),(2,32),(2,35),(2,31),(6,32),(6,35),(6,31),(5,34),(5,33),(5,32),(5,31),(1,32),(1,31),(34,32),(34,35),(34,22),(34,4),(34,17),(34,31),(7,32),(7,31),(33,8),(33,32),(33,35),(33,22),(33,4),(33,17),(33,31),(8,32),(8,31),(32,12),(32,22),(32,4),(32,31),(12,31),(18,35),(22,31),(4,31),(2,34),(2,33),(6,34),(6,33),(1,34),(1,33),(25,34),(25,33),(25,32),(25,31),(34,7),(34,33),(34,16),(34,12),(34,18),(7,33),(24,33),(33,16),(33,12),(33,18),(32,18),(18,31),(17,31),(28,40),(25,38),(21,40),(29,40),(3,37),(27,37),(38,27),(20,40),(30,40),(10,40),(17,40),(2,40),(6,40),(5,36),(5,40),(9,40),(13,39),(13,40),(13,37),(19,40),(28,39),(28,38),(28,37),(25,39),(34,40),(39,20),(39,21),(39,15),(39,30),(39,15),(39,40),(39,37),(21,37),(15,40),(15,37),(24,40),(38,16),(33,40),(20,37),(30,37),(16,40),(16,37),(26,40),(18,40),(23,40),(22,40),(4,40),(13,36),(3,36),(13,41),(28,41),(5,41),(21,41),(20,41),(30,41),(3,42),(10,43),(25,44),(15,44),(2,45),(6,45),(1,45),(34,45),(11,45),(33,45),(35,45),(17,45),(41,46),(41,47),(28,47),(47,50),(21,47),(30,47),(40,48),(1,49),(13,50),(28,50),(21,50),(20,50),(30,50),(16,50)])
t= time.time()
Q = dnx.independent_set.maximum_weighted_independent_set_qubo(G)
dt = time.time() - t
response= sampler.sample_qubo(Q, num_reads=3500) 

for sample, energy in response.data(fields=['sample', 'energy'], sorted_by=None):
    print("%s %s\n" % (sample,energy))
print("QPU SAMPLING TIME:", response.info['timing']['qpu_sampling_time'],"us")
print("QPU PROG TIME:", response.info['timing']['qpu_programming_time'],"us")
